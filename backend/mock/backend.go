// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mock

import (
	"github.com/andviro/filer/backend"
	"sync"
)

var (
	lockBackendMockCreateTransaction sync.RWMutex
	lockBackendMockRemoveTransaction sync.RWMutex
	lockBackendMockStat              sync.RWMutex
)

// BackendMock is a mock implementation of Backend.
//
//     func TestSomethingThatUsesBackend(t *testing.T) {
//
//         // make and configure a mocked Backend
//         mockedBackend := &BackendMock{
//             CreateTransactionFunc: func(filename string, commit func(*backend.FileInfo) error) error {
// 	               panic("TODO: mock out the CreateTransaction method")
//             },
//             RemoveTransactionFunc: func(filename string, commit func(string, *backend.FileInfo) error) error {
// 	               panic("TODO: mock out the RemoveTransaction method")
//             },
//             StatFunc: func(filename string) (*backend.FileInfo, error) {
// 	               panic("TODO: mock out the Stat method")
//             },
//         }
//
//         // TODO: use mockedBackend in code that requires Backend
//         //       and then make assertions.
//
//     }
type BackendMock struct {
	// CreateTransactionFunc mocks the CreateTransaction method.
	CreateTransactionFunc func(filename string, commit func(*backend.FileInfo) error) error

	// RemoveTransactionFunc mocks the RemoveTransaction method.
	RemoveTransactionFunc func(filename string, commit func(string, *backend.FileInfo) error) error

	// StatFunc mocks the Stat method.
	StatFunc func(filename string) (*backend.FileInfo, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateTransaction holds details about calls to the CreateTransaction method.
		CreateTransaction []struct {
			// Filename is the filename argument value.
			Filename string
			// Commit is the commit argument value.
			Commit func(*backend.FileInfo) error
		}
		// RemoveTransaction holds details about calls to the RemoveTransaction method.
		RemoveTransaction []struct {
			// Filename is the filename argument value.
			Filename string
			// Commit is the commit argument value.
			Commit func(string, *backend.FileInfo) error
		}
		// Stat holds details about calls to the Stat method.
		Stat []struct {
			// Filename is the filename argument value.
			Filename string
		}
	}
}

// CreateTransaction calls CreateTransactionFunc.
func (mock *BackendMock) CreateTransaction(filename string, commit func(*backend.FileInfo) error) error {
	if mock.CreateTransactionFunc == nil {
		panic("moq: BackendMock.CreateTransactionFunc is nil but Backend.CreateTransaction was just called")
	}
	callInfo := struct {
		Filename string
		Commit   func(*backend.FileInfo) error
	}{
		Filename: filename,
		Commit:   commit,
	}
	lockBackendMockCreateTransaction.Lock()
	mock.calls.CreateTransaction = append(mock.calls.CreateTransaction, callInfo)
	lockBackendMockCreateTransaction.Unlock()
	return mock.CreateTransactionFunc(filename, commit)
}

// CreateTransactionCalls gets all the calls that were made to CreateTransaction.
// Check the length with:
//     len(mockedBackend.CreateTransactionCalls())
func (mock *BackendMock) CreateTransactionCalls() []struct {
	Filename string
	Commit   func(*backend.FileInfo) error
} {
	var calls []struct {
		Filename string
		Commit   func(*backend.FileInfo) error
	}
	lockBackendMockCreateTransaction.RLock()
	calls = mock.calls.CreateTransaction
	lockBackendMockCreateTransaction.RUnlock()
	return calls
}

// RemoveTransaction calls RemoveTransactionFunc.
func (mock *BackendMock) RemoveTransaction(filename string, commit func(string, *backend.FileInfo) error) error {
	if mock.RemoveTransactionFunc == nil {
		panic("moq: BackendMock.RemoveTransactionFunc is nil but Backend.RemoveTransaction was just called")
	}
	callInfo := struct {
		Filename string
		Commit   func(string, *backend.FileInfo) error
	}{
		Filename: filename,
		Commit:   commit,
	}
	lockBackendMockRemoveTransaction.Lock()
	mock.calls.RemoveTransaction = append(mock.calls.RemoveTransaction, callInfo)
	lockBackendMockRemoveTransaction.Unlock()
	return mock.RemoveTransactionFunc(filename, commit)
}

// RemoveTransactionCalls gets all the calls that were made to RemoveTransaction.
// Check the length with:
//     len(mockedBackend.RemoveTransactionCalls())
func (mock *BackendMock) RemoveTransactionCalls() []struct {
	Filename string
	Commit   func(string, *backend.FileInfo) error
} {
	var calls []struct {
		Filename string
		Commit   func(string, *backend.FileInfo) error
	}
	lockBackendMockRemoveTransaction.RLock()
	calls = mock.calls.RemoveTransaction
	lockBackendMockRemoveTransaction.RUnlock()
	return calls
}

// Stat calls StatFunc.
func (mock *BackendMock) Stat(filename string) (*backend.FileInfo, error) {
	if mock.StatFunc == nil {
		panic("moq: BackendMock.StatFunc is nil but Backend.Stat was just called")
	}
	callInfo := struct {
		Filename string
	}{
		Filename: filename,
	}
	lockBackendMockStat.Lock()
	mock.calls.Stat = append(mock.calls.Stat, callInfo)
	lockBackendMockStat.Unlock()
	return mock.StatFunc(filename)
}

// StatCalls gets all the calls that were made to Stat.
// Check the length with:
//     len(mockedBackend.StatCalls())
func (mock *BackendMock) StatCalls() []struct {
	Filename string
} {
	var calls []struct {
		Filename string
	}
	lockBackendMockStat.RLock()
	calls = mock.calls.Stat
	lockBackendMockStat.RUnlock()
	return calls
}
