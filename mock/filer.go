// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mock

import (
	"gogs.sferainfo.net/edo/fs"
	"io"
	"os"
	"sync"
)

var (
	lockFileServiceMockCreate   sync.RWMutex
	lockFileServiceMockEnsure   sync.RWMutex
	lockFileServiceMockOpen     sync.RWMutex
	lockFileServiceMockRemove   sync.RWMutex
	lockFileServiceMockRename   sync.RWMutex
	lockFileServiceMockStat     sync.RWMutex
	lockFileServiceMockTempFile sync.RWMutex
)

// FileServiceMock is a mock implementation of FileService.
//
//     func TestSomethingThatUsesFileService(t *testing.T) {
//
//         // make and configure a mocked FileService
//         mockedFileService := &FileServiceMock{
//             CreateFunc: func(fn string) (io.WriteCloser, error) {
// 	               panic("TODO: mock out the Create method")
//             },
//             EnsureFunc: func(path ...string) (string, error) {
// 	               panic("TODO: mock out the Ensure method")
//             },
//             OpenFunc: func(fn string) (io.ReadCloser, error) {
// 	               panic("TODO: mock out the Open method")
//             },
//             RemoveFunc: func(fn string) error {
// 	               panic("TODO: mock out the Remove method")
//             },
//             RenameFunc: func(from string, to string) error {
// 	               panic("TODO: mock out the Rename method")
//             },
//             StatFunc: func(fn string) (fs.FileInfo, error) {
// 	               panic("TODO: mock out the Stat method")
//             },
//             TempFileFunc: func(prefix string) (*os.File, error) {
// 	               panic("TODO: mock out the TempFile method")
//             },
//         }
//
//         // TODO: use mockedFileService in code that requires FileService
//         //       and then make assertions.
//
//     }
type FileServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(fn string) (io.WriteCloser, error)

	// EnsureFunc mocks the Ensure method.
	EnsureFunc func(path ...string) (string, error)

	// OpenFunc mocks the Open method.
	OpenFunc func(fn string) (io.ReadCloser, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(fn string) error

	// RenameFunc mocks the Rename method.
	RenameFunc func(from string, to string) error

	// StatFunc mocks the Stat method.
	StatFunc func(fn string) (fs.FileInfo, error)

	// TempFileFunc mocks the TempFile method.
	TempFileFunc func(prefix string) (*os.File, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Fn is the fn argument value.
			Fn string
		}
		// Ensure holds details about calls to the Ensure method.
		Ensure []struct {
			// Path is the path argument value.
			Path []string
		}
		// Open holds details about calls to the Open method.
		Open []struct {
			// Fn is the fn argument value.
			Fn string
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Fn is the fn argument value.
			Fn string
		}
		// Rename holds details about calls to the Rename method.
		Rename []struct {
			// From is the from argument value.
			From string
			// To is the to argument value.
			To string
		}
		// Stat holds details about calls to the Stat method.
		Stat []struct {
			// Fn is the fn argument value.
			Fn string
		}
		// TempFile holds details about calls to the TempFile method.
		TempFile []struct {
			// Prefix is the prefix argument value.
			Prefix string
		}
	}
}

// Create calls CreateFunc.
func (mock *FileServiceMock) Create(fn string) (io.WriteCloser, error) {
	if mock.CreateFunc == nil {
		panic("moq: FileServiceMock.CreateFunc is nil but FileService.Create was just called")
	}
	callInfo := struct {
		Fn string
	}{
		Fn: fn,
	}
	lockFileServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockFileServiceMockCreate.Unlock()
	return mock.CreateFunc(fn)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedFileService.CreateCalls())
func (mock *FileServiceMock) CreateCalls() []struct {
	Fn string
} {
	var calls []struct {
		Fn string
	}
	lockFileServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockFileServiceMockCreate.RUnlock()
	return calls
}

// Ensure calls EnsureFunc.
func (mock *FileServiceMock) Ensure(path ...string) (string, error) {
	if mock.EnsureFunc == nil {
		panic("moq: FileServiceMock.EnsureFunc is nil but FileService.Ensure was just called")
	}
	callInfo := struct {
		Path []string
	}{
		Path: path,
	}
	lockFileServiceMockEnsure.Lock()
	mock.calls.Ensure = append(mock.calls.Ensure, callInfo)
	lockFileServiceMockEnsure.Unlock()
	return mock.EnsureFunc(path...)
}

// EnsureCalls gets all the calls that were made to Ensure.
// Check the length with:
//     len(mockedFileService.EnsureCalls())
func (mock *FileServiceMock) EnsureCalls() []struct {
	Path []string
} {
	var calls []struct {
		Path []string
	}
	lockFileServiceMockEnsure.RLock()
	calls = mock.calls.Ensure
	lockFileServiceMockEnsure.RUnlock()
	return calls
}

// Open calls OpenFunc.
func (mock *FileServiceMock) Open(fn string) (io.ReadCloser, error) {
	if mock.OpenFunc == nil {
		panic("moq: FileServiceMock.OpenFunc is nil but FileService.Open was just called")
	}
	callInfo := struct {
		Fn string
	}{
		Fn: fn,
	}
	lockFileServiceMockOpen.Lock()
	mock.calls.Open = append(mock.calls.Open, callInfo)
	lockFileServiceMockOpen.Unlock()
	return mock.OpenFunc(fn)
}

// OpenCalls gets all the calls that were made to Open.
// Check the length with:
//     len(mockedFileService.OpenCalls())
func (mock *FileServiceMock) OpenCalls() []struct {
	Fn string
} {
	var calls []struct {
		Fn string
	}
	lockFileServiceMockOpen.RLock()
	calls = mock.calls.Open
	lockFileServiceMockOpen.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *FileServiceMock) Remove(fn string) error {
	if mock.RemoveFunc == nil {
		panic("moq: FileServiceMock.RemoveFunc is nil but FileService.Remove was just called")
	}
	callInfo := struct {
		Fn string
	}{
		Fn: fn,
	}
	lockFileServiceMockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	lockFileServiceMockRemove.Unlock()
	return mock.RemoveFunc(fn)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//     len(mockedFileService.RemoveCalls())
func (mock *FileServiceMock) RemoveCalls() []struct {
	Fn string
} {
	var calls []struct {
		Fn string
	}
	lockFileServiceMockRemove.RLock()
	calls = mock.calls.Remove
	lockFileServiceMockRemove.RUnlock()
	return calls
}

// Rename calls RenameFunc.
func (mock *FileServiceMock) Rename(from string, to string) error {
	if mock.RenameFunc == nil {
		panic("moq: FileServiceMock.RenameFunc is nil but FileService.Rename was just called")
	}
	callInfo := struct {
		From string
		To   string
	}{
		From: from,
		To:   to,
	}
	lockFileServiceMockRename.Lock()
	mock.calls.Rename = append(mock.calls.Rename, callInfo)
	lockFileServiceMockRename.Unlock()
	return mock.RenameFunc(from, to)
}

// RenameCalls gets all the calls that were made to Rename.
// Check the length with:
//     len(mockedFileService.RenameCalls())
func (mock *FileServiceMock) RenameCalls() []struct {
	From string
	To   string
} {
	var calls []struct {
		From string
		To   string
	}
	lockFileServiceMockRename.RLock()
	calls = mock.calls.Rename
	lockFileServiceMockRename.RUnlock()
	return calls
}

// Stat calls StatFunc.
func (mock *FileServiceMock) Stat(fn string) (fs.FileInfo, error) {
	if mock.StatFunc == nil {
		panic("moq: FileServiceMock.StatFunc is nil but FileService.Stat was just called")
	}
	callInfo := struct {
		Fn string
	}{
		Fn: fn,
	}
	lockFileServiceMockStat.Lock()
	mock.calls.Stat = append(mock.calls.Stat, callInfo)
	lockFileServiceMockStat.Unlock()
	return mock.StatFunc(fn)
}

// StatCalls gets all the calls that were made to Stat.
// Check the length with:
//     len(mockedFileService.StatCalls())
func (mock *FileServiceMock) StatCalls() []struct {
	Fn string
} {
	var calls []struct {
		Fn string
	}
	lockFileServiceMockStat.RLock()
	calls = mock.calls.Stat
	lockFileServiceMockStat.RUnlock()
	return calls
}

// TempFile calls TempFileFunc.
func (mock *FileServiceMock) TempFile(prefix string) (*os.File, error) {
	if mock.TempFileFunc == nil {
		panic("moq: FileServiceMock.TempFileFunc is nil but FileService.TempFile was just called")
	}
	callInfo := struct {
		Prefix string
	}{
		Prefix: prefix,
	}
	lockFileServiceMockTempFile.Lock()
	mock.calls.TempFile = append(mock.calls.TempFile, callInfo)
	lockFileServiceMockTempFile.Unlock()
	return mock.TempFileFunc(prefix)
}

// TempFileCalls gets all the calls that were made to TempFile.
// Check the length with:
//     len(mockedFileService.TempFileCalls())
func (mock *FileServiceMock) TempFileCalls() []struct {
	Prefix string
} {
	var calls []struct {
		Prefix string
	}
	lockFileServiceMockTempFile.RLock()
	calls = mock.calls.TempFile
	lockFileServiceMockTempFile.RUnlock()
	return calls
}
